<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Welding_adapter\Welding_adapter.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Welding_adapter\Welding_adapter.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Sun Jan 21 18:48:14 2018
<BR><P>
<H3>Maximum Stack Usage =        656 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
cord_continuity_test &rArr; cord_transmittContiunuity &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[31]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[18]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">MemManage_Handler</a><BR>
 <LI><a href="#[203]">run_OS</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[203]">run_OS</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[31]">ADC1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[19]">BusFault_Handler</a> from stm32f3xx_it.o(i.BusFault_Handler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[33]">CAN_RX0_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[34]">CAN_RX1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[35]">CAN_SCE_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[32]">CAN_TX_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[c]">CDC_Control_FS</a> from usbd_cdc_if.o(i.CDC_Control_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[b]">CDC_DeInit_FS</a> from usbd_cdc_if.o(i.CDC_DeInit_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[a]">CDC_Init_FS</a> from usbd_cdc_if.o(i.CDC_Init_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[d]">CDC_Receive_FS</a> from usbd_cdc_if.o(i.CDC_Receive_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[49]">CEC_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[59]">COMP1_2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel3_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel4_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel5_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel6_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[30]">DMA1_Channel7_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[51]">DMA2_Channel1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[52]">DMA2_Channel2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[53]">DMA2_Channel3_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[54]">DMA2_Channel4_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[55]">DMA2_Channel5_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[1c]">DebugMon_Handler</a> from stm32f3xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[25]">EXTI0_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[47]">EXTI15_10_IRQHandler</a> from stm32f3xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[26]">EXTI1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[27]">EXTI2_TSC_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[28]">EXTI3_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[29]">EXTI4_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[36]">EXTI9_5_IRQHandler</a> from stm32f3xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[23]">FLASH_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[5e]">FPU_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[17]">HardFault_Handler</a> from stm32f3xx_it.o(.emb_text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3f]">I2C1_ER_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3e]">I2C1_EV_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[41]">I2C2_ER_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[40]">I2C2_EV_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[94]">Led_flash_task</a> from test.o(i.Led_flash_task) referenced from test.o(i.Led_flash_task)
 <LI><a href="#[94]">Led_flash_task</a> from test.o(i.Led_flash_task) referenced from main.o(i.main)
 <LI><a href="#[79]">MachinesRPEStart</a> from machines.o(i.MachinesRPEStart) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[79]">MachinesRPEStart</a> from machines.o(i.MachinesRPEStart) referenced from machines.o(i.init_mach)
 <LI><a href="#[7a]">MachinesRPEStop</a> from machines.o(i.MachinesRPEStop) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[18]">MemManage_Handler</a> from stm32f3xx_it.o(i.MemManage_Handler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[16]">NMI_Handler</a> from stm32f3xx_it.o(i.NMI_Handler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[20]">PVD_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[1d]">PendSV_Handler</a> from stm32f3xx_it.o(i.PendSV_Handler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[24]">RCC_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[48]">RTC_Alarm_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[22]">RTC_WKUP_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[15]">Reset_Handler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[56]">SDADC1_IRQHandler</a> from stm32f3xx_it.o(i.SDADC1_IRQHandler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[57]">SDADC2_IRQHandler</a> from stm32f3xx_it.o(i.SDADC2_IRQHandler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[58]">SDADC3_IRQHandler</a> from stm32f3xx_it.o(i.SDADC3_IRQHandler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[42]">SPI1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[43]">SPI2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4e]">SPI3_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[1b]">SVC_Handler</a> from stm32f3xx_it.o(i.SVC_Handler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[65]">SinchronusTransmittFunc</a> from serial_com.o(i.SinchronusTransmittFunc) referenced from serial_com.o(i.SinchronusTransmittFunc)
 <LI><a href="#[65]">SinchronusTransmittFunc</a> from serial_com.o(i.SinchronusTransmittFunc) referenced from serial_com.o(i.TIM2_IRQHandler)
 <LI><a href="#[9b]">SynchronusProcess</a> from serial_com.o(i.SynchronusProcess) referenced from serial_com.o(i.SynchronusProcess)
 <LI><a href="#[9b]">SynchronusProcess</a> from serial_com.o(i.SynchronusProcess) referenced from serial_com.o(i.serial_com_init)
 <LI><a href="#[1e]">SysTick_Handler</a> from stm32f3xx_it.o(i.SysTick_Handler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[60]">SystemInit</a> from system_stm32f3xx.o(i.SystemInit) referenced from startup_stm32f373xc.o(.text)
 <LI><a href="#[21]">TAMP_STAMP_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4a]">TIM12_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4b]">TIM13_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4c]">TIM14_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[37]">TIM15_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[38]">TIM16_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[39]">TIM17_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3a]">TIM18_DAC2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[5d]">TIM19_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3b]">TIM2_IRQHandler</a> from serial_com.o(i.TIM2_IRQHandler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3c]">TIM3_IRQHandler</a> from stm32f3xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3d]">TIM4_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4d]">TIM5_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4f]">TIM6_DAC1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[50]">TIM7_IRQHandler</a> from stm32f3xx_it.o(i.TIM7_IRQHandler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[44]">USART1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[45]">USART2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[46]">USART3_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4]">USBD_CDC_DataIn</a> from usbd_cdc.o(i.USBD_CDC_DataIn) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[5]">USBD_CDC_DataOut</a> from usbd_cdc.o(i.USBD_CDC_DataOut) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1]">USBD_CDC_DeInit</a> from usbd_cdc.o(i.USBD_CDC_DeInit) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[3]">USBD_CDC_EP0_RxReady</a> from usbd_cdc.o(i.USBD_CDC_EP0_RxReady) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[9]">USBD_CDC_GetDeviceQualifierDescriptor</a> from usbd_cdc.o(i.USBD_CDC_GetDeviceQualifierDescriptor) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[7]">USBD_CDC_GetFSCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetFSCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[6]">USBD_CDC_GetHSCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetHSCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[8]">USBD_CDC_GetOtherSpeedCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetOtherSpeedCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[0]">USBD_CDC_Init</a> from usbd_cdc.o(i.USBD_CDC_Init) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[2]">USBD_CDC_Setup</a> from usbd_cdc.o(i.USBD_CDC_Setup) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[13]">USBD_FS_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[e]">USBD_FS_DeviceDescriptor</a> from usbd_desc.o(i.USBD_FS_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[14]">USBD_FS_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[f]">USBD_FS_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_FS_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[10]">USBD_FS_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[11]">USBD_FS_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[12]">USBD_FS_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_FS_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[5c]">USBWakeUp_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[5a]">USB_HP_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[5b]">USB_LP_IRQHandler</a> from stm32f3xx_it.o(i.USB_LP_IRQHandler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[1a]">UsageFault_Handler</a> from stm32f3xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[1f]">WWDG_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[85]">WeldingRPEStart</a> from welding.o(i.WeldingRPEStart) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[85]">WeldingRPEStart</a> from welding.o(i.WeldingRPEStart) referenced from welding.o(i.init_weld)
 <LI><a href="#[86]">WeldingRPEStop</a> from welding.o(i.WeldingRPEStop) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[61]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f373xc.o(.text)
 <LI><a href="#[63]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[62]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[67]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[68]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[91]">calibMeasure</a> from calibration.o(i.calibMeasure) referenced from calibration.o(i.calibMeasure)
 <LI><a href="#[91]">calibMeasure</a> from calibration.o(i.calibMeasure) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[69]">command_do_events</a> from serial_com.o(i.command_do_events) referenced from serial_com.o(i.add_command_to_queue)
 <LI><a href="#[96]">compute_THD_with_FFT</a> from do_task.o(i.compute_THD_with_FFT) referenced from sdadc.o(i.measure_IL_Current)
 <LI><a href="#[96]">compute_THD_with_FFT</a> from do_task.o(i.compute_THD_with_FFT) referenced from sdadc.o(i.measure_ULN_Voltage)
 <LI><a href="#[98]">compute_rms</a> from sdadc.o(i.compute_rms) referenced from do_task.o(i.measuring_task_fft)
 <LI><a href="#[98]">compute_rms</a> from sdadc.o(i.compute_rms) referenced from do_task.o(i.measuring_task_no_THD)
 <LI><a href="#[71]">cord_RISO_onePhaseToPE</a> from cord.o(i.cord_RISO_onePhaseToPE) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[71]">cord_RISO_onePhaseToPE</a> from cord.o(i.cord_RISO_onePhaseToPE) referenced 2 times from cord.o(i.cord_RISO_onePhaseToPE)
 <LI><a href="#[72]">cord_RISO_phaseToPhase</a> from cord.o(i.cord_RISO_phaseToPhase) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[72]">cord_RISO_phaseToPhase</a> from cord.o(i.cord_RISO_phaseToPhase) referenced 2 times from cord.o(i.cord_RISO_phaseToPhase)
 <LI><a href="#[70]">cord_RISO_phasesToPE</a> from cord.o(i.cord_RISO_phasesToPE) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[70]">cord_RISO_phasesToPE</a> from cord.o(i.cord_RISO_phasesToPE) referenced 2 times from cord.o(i.cord_RISO_phasesToPE)
 <LI><a href="#[6f]">cord_continuity_test</a> from cord.o(i.cord_continuity_test) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[6f]">cord_continuity_test</a> from cord.o(i.cord_continuity_test) referenced from cord.o(i.cord_continuity_test)
 <LI><a href="#[6e]">cord_meas_correct_wiring</a> from cord.o(i.cord_meas_correct_wiring) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[6e]">cord_meas_correct_wiring</a> from cord.o(i.cord_meas_correct_wiring) referenced from cord.o(i.cord_meas_correct_wiring)
 <LI><a href="#[6e]">cord_meas_correct_wiring</a> from cord.o(i.cord_meas_correct_wiring) referenced from cord.o(i.init_cord)
 <LI><a href="#[6d]">deinitCord</a> from cord.o(i.deinitCord) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[75]">deinitMachines</a> from machines.o(i.deinitMachines) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[81]">deinitWelding</a> from welding.o(i.deinitWelding) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[6c]">init_cord</a> from cord.o(i.init_cord) referenced 2 times from serial_com.o(i.command_analyze)
 <LI><a href="#[6c]">init_cord</a> from cord.o(i.init_cord) referenced from cord.o(i.cord_meas_correct_wiring)
 <LI><a href="#[6c]">init_cord</a> from cord.o(i.init_cord) referenced 3 times from cord.o(i.init_cord)
 <LI><a href="#[74]">init_mach</a> from machines.o(i.init_mach) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[74]">init_mach</a> from machines.o(i.init_mach) referenced 3 times from machines.o(i.init_mach)
 <LI><a href="#[80]">init_weld</a> from welding.o(i.init_weld) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[80]">init_weld</a> from welding.o(i.init_weld) referenced 3 times from welding.o(i.init_weld)
 <LI><a href="#[64]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[9a]">led_blinking_task</a> from do_task.o(i.led_blinking_task) referenced from do_task.o(i.led_blinking_task)
 <LI><a href="#[9a]">led_blinking_task</a> from do_task.o(i.led_blinking_task) referenced from do_task.o(i.power_on_test)
 <LI><a href="#[77]">mach_RISO_onePhaseToPE</a> from machines.o(i.mach_RISO_onePhaseToPE) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[77]">mach_RISO_onePhaseToPE</a> from machines.o(i.mach_RISO_onePhaseToPE) referenced 2 times from machines.o(i.mach_RISO_onePhaseToPE)
 <LI><a href="#[76]">mach_RISO_phasesToPE</a> from machines.o(i.mach_RISO_phasesToPE) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[76]">mach_RISO_phasesToPE</a> from machines.o(i.mach_RISO_phasesToPE) referenced 2 times from machines.o(i.mach_RISO_phasesToPE)
 <LI><a href="#[7b]">mach_URES</a> from machines.o(i.mach_URES) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[7b]">mach_URES</a> from machines.o(i.mach_URES) referenced 2 times from machines.o(i.mach_URES)
 <LI><a href="#[7c]">mach_URES_Stop</a> from machines.o(i.mach_URES_Stop) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[7c]">mach_URES_Stop</a> from machines.o(i.mach_URES_Stop) referenced from machines.o(i.mach_URES)
 <LI><a href="#[5f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[97]">measuring_task_fft</a> from do_task.o(i.measuring_task_fft) referenced from do_task.o(i.measuring_task_fft)
 <LI><a href="#[97]">measuring_task_fft</a> from do_task.o(i.measuring_task_fft) referenced from do_task.o(i.start_measure)
 <LI><a href="#[99]">measuring_task_no_THD</a> from do_task.o(i.measuring_task_no_THD) referenced from do_task.o(i.measuring_task_no_THD)
 <LI><a href="#[99]">measuring_task_no_THD</a> from do_task.o(i.measuring_task_no_THD) referenced from do_task.o(i.start_measure_no_THD)
 <LI><a href="#[93]">power_on_test</a> from do_task.o(i.power_on_test) referenced from cord.o(i.init_cord)
 <LI><a href="#[93]">power_on_test</a> from do_task.o(i.power_on_test) referenced from machines.o(i.init_mach)
 <LI><a href="#[93]">power_on_test</a> from do_task.o(i.power_on_test) referenced from welding.o(i.init_weld)
 <LI><a href="#[93]">power_on_test</a> from do_task.o(i.power_on_test) referenced from main.o(i.main)
 <LI><a href="#[93]">power_on_test</a> from do_task.o(i.power_on_test) referenced from do_task.o(i.power_on_test)
 <LI><a href="#[7f]">returnMeasuredTask</a> from com_meas_tasks.o(i.returnMeasuredTask) referenced 2 times from serial_com.o(i.command_analyze)
 <LI><a href="#[6b]">send_mains_status</a> from do_task.o(i.send_mains_status) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[6b]">send_mains_status</a> from do_task.o(i.send_mains_status) referenced from cord.o(i.init_cord)
 <LI><a href="#[6b]">send_mains_status</a> from do_task.o(i.send_mains_status) referenced from machines.o(i.init_mach)
 <LI><a href="#[6b]">send_mains_status</a> from do_task.o(i.send_mains_status) referenced from welding.o(i.init_weld)
 <LI><a href="#[6b]">send_mains_status</a> from do_task.o(i.send_mains_status) referenced from main.o(i.start_set_normal)
 <LI><a href="#[6a]">send_warning_MSG</a> from comunication.o(i.send_warning_MSG) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[6a]">send_warning_MSG</a> from comunication.o(i.send_warning_MSG) referenced from do_task.o(i.power_on_test)
 <LI><a href="#[7d]">startMainsMeasurement</a> from com_meas_tasks.o(i.startMainsMeasurement) referenced 2 times from serial_com.o(i.command_analyze)
 <LI><a href="#[95]">start_set_normal</a> from main.o(i.start_set_normal) referenced from main.o(i.main)
 <LI><a href="#[95]">start_set_normal</a> from main.o(i.start_set_normal) referenced from main.o(i.start_set_normal)
 <LI><a href="#[7e]">stopMainsMeasurement</a> from com_meas_tasks.o(i.stopMainsMeasurement) referenced 2 times from serial_com.o(i.command_analyze)
 <LI><a href="#[73]">stop_cord</a> from cord.o(i.stop_cord) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[78]">stop_mach</a> from machines.o(i.stop_mach) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[84]">stop_weld</a> from welding.o(i.stop_weld) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[9c]">transmit_command_handle</a> from serial_com.o(i.transmit_command_handle) referenced from serial_com.o(i.transmit_command_handle)
 <LI><a href="#[9c]">transmit_command_handle</a> from serial_com.o(i.transmit_command_handle) referenced from serial_com.o(i.transmit_func)
 <LI><a href="#[92]">transmittCalibConstants</a> from calibration.o(i.transmittCalibConstants) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[66]">usbCheckTask</a> from comunication.o(i.usbCheckTask) referenced from comunication.o(i.USBConnected_Handler)
 <LI><a href="#[66]">usbCheckTask</a> from comunication.o(i.usbCheckTask) referenced from comunication.o(i.usbCheckTask)
 <LI><a href="#[8b]">weld_RISO_MainsToClass2</a> from welding.o(i.weld_RISO_MainsToClass2) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[8b]">weld_RISO_MainsToClass2</a> from welding.o(i.weld_RISO_MainsToClass2) referenced 2 times from welding.o(i.weld_RISO_MainsToClass2)
 <LI><a href="#[8c]">weld_RISO_MainsToClass2_Stop</a> from welding.o(i.weld_RISO_MainsToClass2_Stop) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[87]">weld_RISO_MainsToWeld</a> from welding.o(i.weld_RISO_MainsToWeld) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[87]">weld_RISO_MainsToWeld</a> from welding.o(i.weld_RISO_MainsToWeld) referenced 2 times from welding.o(i.weld_RISO_MainsToWeld)
 <LI><a href="#[88]">weld_RISO_MainsToWeld_Stop</a> from welding.o(i.weld_RISO_MainsToWeld_Stop) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[89]">weld_RISO_WeldToPE</a> from welding.o(i.weld_RISO_WeldToPE) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[89]">weld_RISO_WeldToPE</a> from welding.o(i.weld_RISO_WeldToPE) referenced 2 times from welding.o(i.weld_RISO_WeldToPE)
 <LI><a href="#[8a]">weld_RISO_WeldToPE_Stop</a> from welding.o(i.weld_RISO_WeldToPE_Stop) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[83]">weld_RISO_onePhaseToPE</a> from welding.o(i.weld_RISO_onePhaseToPE) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[83]">weld_RISO_onePhaseToPE</a> from welding.o(i.weld_RISO_onePhaseToPE) referenced 2 times from welding.o(i.weld_RISO_onePhaseToPE)
 <LI><a href="#[82]">weld_RISO_phasesToPE</a> from welding.o(i.weld_RISO_phasesToPE) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[82]">weld_RISO_phasesToPE</a> from welding.o(i.weld_RISO_phasesToPE) referenced 2 times from welding.o(i.weld_RISO_phasesToPE)
 <LI><a href="#[8d]">weld_UnlStart_RMS</a> from welding.o(i.weld_UnlStart_RMS) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[8f]">weld_UnlStart_peak</a> from welding.o(i.weld_UnlStart_peak) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[8e]">weld_UnlStop_RMS</a> from welding.o(i.weld_UnlStop_RMS) referenced from serial_com.o(i.command_analyze)
 <LI><a href="#[90]">weld_UnlStop_peak</a> from welding.o(i.weld_UnlStop_peak) referenced from serial_com.o(i.command_analyze)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[61]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(.text)
</UL>
<P><STRONG><a name="[225]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ba]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[226]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[227]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[228]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[229]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[22a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[17]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f3xx_it.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HardFault_Handler &rArr; Hard_Fault_Handler &rArr; stackDump &rArr; printErrorMsg &rArr; CDC_Transmit_FS &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>COMP1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI2_TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM18_DAC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM6_DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[22b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[64]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[22c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCommandInstance
</UL>

<P><STRONG><a name="[22d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[22e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMessage
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstructProtocolString
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMessage
</UL>

<P><STRONG><a name="[230]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[cc]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mains_status
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_transmittOnePhaseToPE
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_transmittOnePhaseToPE
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tramsmitt_corect_wiring_state
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittPhaseToPhase
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittOnePhaseToPE
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstructProtocolString
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_return
</UL>

<P><STRONG><a name="[c7]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printErrorMsg
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittContiunuity
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConstructedProtocolMessage
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_return
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMessage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindAllAdditionalCmdParameters
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCRC
</UL>

<P><STRONG><a name="[162]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConstant
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_return
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMessage
</UL>

<P><STRONG><a name="[15e]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_func
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMessage
</UL>

<P><STRONG><a name="[21b]"></a>strpbrk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, strpbrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_single
</UL>

<P><STRONG><a name="[a4]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[a7]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMessage
</UL>

<P><STRONG><a name="[1ef]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmittCalibConstants
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmittRequestedResult
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredVoltage
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredTHD_V
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredTHD_C
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredPowerS
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredPowerR
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredPF
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredCurrent
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittContiunuity
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RISO_weld_resistance
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RISO_mach_resistance
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RPE_cord_resistance
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RISO_cord_resistance
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConstant
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[231]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a5]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[b0]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[232]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[233]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ba]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[234]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[235]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[236]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[af]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[bd]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[62]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b3]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[237]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>BusFault_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>CDC_Transmit_FS</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.CDC_Transmit_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CDC_Transmit_FS &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printErrorMsg
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialSend
</UL>

<P><STRONG><a name="[c9]"></a>ConstructProtocolString</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, serial_com.o(i.ConstructProtocolString))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCRC
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
</UL>

<P><STRONG><a name="[cd]"></a>CreateCommandInstance</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, serial_com.o(i.CreateCommandInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CreateCommandInstance
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
</UL>

<P><STRONG><a name="[1c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EXTI15_10_IRQHandler &rArr; USBConnected_Handler &rArr; restart_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBConnected_Handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 954 bytes, Stack size 40 bytes, stm32f3xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inst_value
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f3xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTimerInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[125]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 228 bytes, Stack size 36 bytes, stm32f3xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>

<P><STRONG><a name="[d6]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f3xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>HAL_GPIO_Init</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, stm32f3xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_MspInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[184]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f3xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBConnected_Handler
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f3xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blinking_task
</UL>

<P><STRONG><a name="[bf]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f3xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IL_setGain
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_test
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_REL
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBConnected_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_ULN_Voltage
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_all_REL
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sel_REL_DRIVER
</UL>

<P><STRONG><a name="[d5]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f3xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_PollForCalibEvent
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_InjConvStop
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_EnterInitMode
</UL>

<P><STRONG><a name="[17a]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f3xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d7]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f3xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f3xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[da]"></a>HAL_MspInit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f3xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[126]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f3xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sinchro_interrupt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>

<P><STRONG><a name="[ee]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f3xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sinchro_interrupt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_MspInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[dc]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f3xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_MspInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[d8]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f3xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_PCDEx_PMAConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f3xx_hal_pcd_ex.o(i.HAL_PCDEx_PMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCDEx_PMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[f6]"></a>HAL_PCDEx_SetConnectionState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCDEx_SetConnectionState))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[de]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[e0]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[19d]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, stm32f3xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_EP_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[19c]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, stm32f3xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[19f]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f3xx_hal_pcd.o(i.HAL_PCD_EP_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 772 bytes, Stack size 36 bytes, stm32f3xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_PCD_EP_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[15c]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, stm32f3xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, stm32f3xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_PCD_EP_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[e2]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, stm32f3xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WritePMA
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[e4]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, stm32f3xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_PCD_IRQHandler &rArr; PCD_EP_ISR_Handler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>HAL_PCD_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f3xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[ec]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[e6]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f3xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[f3]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[f5]"></a>HAL_PCD_Start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f3xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetConnectionState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[e9]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[17c]"></a>HAL_PWREx_EnableSDADC</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f3xx_hal_pwr_ex.o(i.HAL_PWREx_EnableSDADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWREx_EnableSDADC
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f8]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 452 bytes, Stack size 40 bytes, stm32f3xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f9]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, stm32f3xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fc]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f3xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fb]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f3xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[fd]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f3xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[fa]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f3xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[fe]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1532 bytes, Stack size 40 bytes, stm32f3xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ff]"></a>HAL_RS485Ex_Init</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f3xx_hal_uart_ex.o(i.HAL_RS485Ex_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RS485Ex_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_SDADC_AssociateChannelConfig</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_AssociateChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SDADC_AssociateChannelConfig &rArr; SDADC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_ExitInitMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC3_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC2_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC1_Init
</UL>

<P><STRONG><a name="[10b]"></a>HAL_SDADC_CalibrationCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_CalibrationCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>HAL_SDADC_CalibrationStart</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_CalibrationStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SDADC_CalibrationStart &rArr; SDADC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_ExitInitMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC3_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC2_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC1_Init
</UL>

<P><STRONG><a name="[109]"></a>HAL_SDADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>HAL_SDADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>HAL_SDADC_IRQHandler</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SDADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_InjectedConvCpltCallback
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_ErrorCallback
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_ConvCpltCallback
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_CalibrationCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_measure
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC3_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC2_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC1_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>HAL_SDADC_Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SDADC_Init &rArr; HAL_SDADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC3_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC2_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC1_Init
</UL>

<P><STRONG><a name="[10f]"></a>HAL_SDADC_InjectedConfigChannel</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_InjectedConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SDADC_InjectedConfigChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_GetInjChannelsNbr
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC3_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC2_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC1_Init
</UL>

<P><STRONG><a name="[10a]"></a>HAL_SDADC_InjectedConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_InjectedConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_IRQHandler
</UL>

<P><STRONG><a name="[164]"></a>HAL_SDADC_InjectedGetValue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_InjectedGetValue))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC3_Handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC1_Handler
</UL>

<P><STRONG><a name="[148]"></a>HAL_SDADC_InjectedMultiModeConfigChannel</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_InjectedMultiModeConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDADC_InjectedMultiModeConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC1_Init
</UL>

<P><STRONG><a name="[165]"></a>HAL_SDADC_InjectedMultiModeGetValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_InjectedMultiModeGetValue))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC1_Handler
</UL>

<P><STRONG><a name="[111]"></a>HAL_SDADC_InjectedStart</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_InjectedStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SDADC_InjectedStart &rArr; SDADC_InjConvStart &rArr; SDADC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_InjConvStart
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>HAL_SDADC_InjectedStart_IT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_InjectedStart_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SDADC_InjectedStart_IT &rArr; SDADC_InjConvStart &rArr; SDADC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_InjConvStart
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>HAL_SDADC_InjectedStop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_InjectedStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SDADC_InjectedStop &rArr; SDADC_InjConvStop &rArr; SDADC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_InjConvStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_STOP_measure
</UL>

<P><STRONG><a name="[116]"></a>HAL_SDADC_InjectedStop_IT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_InjectedStop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SDADC_InjectedStop_IT &rArr; SDADC_InjConvStop &rArr; SDADC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_InjConvStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_STOP_measure
</UL>

<P><STRONG><a name="[10e]"></a>HAL_SDADC_MspInit</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, stm32f3xx_hal_msp.o(i.HAL_SDADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SDADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_Init
</UL>

<P><STRONG><a name="[145]"></a>HAL_SDADC_MultiModeConfigChannel</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_MultiModeConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDADC_MultiModeConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC1_Init
</UL>

<P><STRONG><a name="[117]"></a>HAL_SDADC_PollForCalibEvent</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_PollForCalibEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SDADC_PollForCalibEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC3_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC2_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC1_Init
</UL>

<P><STRONG><a name="[118]"></a>HAL_SDADC_PrepareChannelConfig</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_PrepareChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SDADC_PrepareChannelConfig &rArr; SDADC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_ExitInitMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC3_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC2_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC1_Init
</UL>

<P><STRONG><a name="[119]"></a>HAL_SDADC_SelectInjectedDelay</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_SelectInjectedDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SDADC_SelectInjectedDelay &rArr; SDADC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_ExitInitMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC3_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC2_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC1_Init
</UL>

<P><STRONG><a name="[146]"></a>HAL_SDADC_SelectInjectedTrigger</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_SelectInjectedTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDADC_SelectInjectedTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC3_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC2_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC1_Init
</UL>

<P><STRONG><a name="[147]"></a>HAL_SDADC_SelectRegularTrigger</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f3xx_hal_sdadc.o(i.HAL_SDADC_SelectRegularTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDADC_SelectRegularTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC1_Init
</UL>

<P><STRONG><a name="[212]"></a>HAL_SPI_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f3xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
</UL>

<P><STRONG><a name="[11a]"></a>HAL_SPI_Init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f3xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[11b]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, stm32f3xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[11c]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, stm32f3xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Send_data
</UL>

<P><STRONG><a name="[17d]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f3xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11f]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f3xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11e]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f3xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[13a]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f3xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTimerInit
</UL>

<P><STRONG><a name="[120]"></a>HAL_TIM_Base_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_Base_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_Base_DeInit &rArr; HAL_TIM_Base_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTimerDeInit
</UL>

<P><STRONG><a name="[122]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTimerInit
</UL>

<P><STRONG><a name="[121]"></a>HAL_TIM_Base_MspDeInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f3xx_hal_msp.o(i.HAL_TIM_Base_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_TIM_Base_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>

<P><STRONG><a name="[123]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f3xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1f6]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_phase_seq
</UL>

<P><STRONG><a name="[d1]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSendTimer
</UL>

<P><STRONG><a name="[1df]"></a>HAL_TIM_Base_Stop</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_Base_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rms
</UL>

<P><STRONG><a name="[17e]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[136]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_IC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_IC_ConfigChannel &rArr; TIM_TI1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI4_SetConfig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI3_SetConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[131]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_IC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[132]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_IC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[133]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_IC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[135]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[138]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>HAL_UART_MspInit</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, stm32f3xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
</UL>

<P><STRONG><a name="[9d]"></a>Hard_Fault_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; printErrorMsg &rArr; CDC_Transmit_FS &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[13f]"></a>IL_setGain</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, sdadc.o(i.IL_setGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IL_setGain
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measure_no_THD
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measure
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IL_auto_gain
</UL>

<P><STRONG><a name="[94]"></a>Led_flash_task</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, test.o(i.Led_flash_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Led_flash_task &rArr; set_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.main)
<LI> test.o(i.Led_flash_task)
</UL>
<P><STRONG><a name="[141]"></a>MX_GPIO_Init</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>MX_SDADC1_Init</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, sdadc.o(i.MX_SDADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_SDADC1_Init &rArr; HAL_SDADC_Init &rArr; HAL_SDADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_SelectRegularTrigger
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_SelectInjectedTrigger
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_SelectInjectedDelay
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_PrepareChannelConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_PollForCalibEvent
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_MultiModeConfigChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_InjectedMultiModeConfigChannel
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_InjectedConfigChannel
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_CalibrationStart
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_AssociateChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>MX_SDADC2_Init</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, sdadc.o(i.MX_SDADC2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_SDADC2_Init &rArr; HAL_SDADC_Init &rArr; HAL_SDADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_SelectInjectedTrigger
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_SelectInjectedDelay
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_PrepareChannelConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_PollForCalibEvent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_InjectedConfigChannel
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_CalibrationStart
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_AssociateChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>MX_SDADC3_Init</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, sdadc.o(i.MX_SDADC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_SDADC3_Init &rArr; HAL_SDADC_Init &rArr; HAL_SDADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_SelectInjectedTrigger
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_SelectInjectedDelay
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_PrepareChannelConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_PollForCalibEvent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_InjectedConfigChannel
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_CalibrationStart
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_AssociateChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>MX_SPI1_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, comunication.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14c]"></a>MX_TIM3_Init</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, timer.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_IC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>MX_TIM6_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, timer.o(i.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14f]"></a>MX_TIM7_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, timer.o(i.MX_TIM7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_TIM7_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, comunication.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_RS485Ex_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[151]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usb_device.o(i.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_RegisterInterface
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>MachRstRels</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, machines.o(i.MachRstRels))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MachRstRels &rArr; set_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_init
</UL>

<P><STRONG><a name="[159]"></a>MachinesInit</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, machines.o(i.MachinesInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MachinesInit &rArr; rst_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_mach
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mach
</UL>

<P><STRONG><a name="[79]"></a>MachinesRPEStart</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, machines.o(i.MachinesRPEStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = MachinesRPEStart &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> machines.o(i.init_mach)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[7a]"></a>MachinesRPEStop</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, machines.o(i.MachinesRPEStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = MachinesRPEStop &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[18]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[15b]"></a>PCD_ReadPMA</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f3xx_hal_pcd_ex.o(i.PCD_ReadPMA))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[e3]"></a>PCD_WritePMA</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f3xx_hal_pcd_ex.o(i.PCD_WritePMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCD_WritePMA
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[1d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[163]"></a>SDADC1_Handler</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sdadc.o(i.SDADC1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SDADC1_Handler &rArr; measure_IL_Current &rArr; IL_auto_gain &rArr; IL_setGain
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_InjectedMultiModeGetValue
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_InjectedGetValue
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_ULN_Voltage
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_IL_Current
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC1_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>SDADC1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.SDADC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SDADC1_IRQHandler &rArr; SDADC1_Handler &rArr; measure_IL_Current &rArr; IL_auto_gain &rArr; IL_setGain
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC1_Handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[168]"></a>SDADC2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdadc.o(i.SDADC2_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC2_IRQHandler
</UL>

<P><STRONG><a name="[57]"></a>SDADC2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.SDADC2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDADC2_IRQHandler &rArr; HAL_SDADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC2_Handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[169]"></a>SDADC3_Handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdadc.o(i.SDADC3_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SDADC3_Handler &rArr; measure_IDIFF &rArr; arm_biquad_cascade_df1_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_InjectedGetValue
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_UNPE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_UL1PE
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_IDIFF
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC3_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>SDADC3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.SDADC3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDADC3_IRQHandler &rArr; SDADC3_Handler &rArr; measure_IDIFF &rArr; arm_biquad_cascade_df1_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC3_Handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[16d]"></a>SPI1_Send_data</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comunication.o(i.SPI1_Send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
</UL>

<P><STRONG><a name="[1b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[15a]"></a>SendComMessage</STRONG> (Thumb, 90 bytes, Stack size 320 bytes, serial_com.o(i.SendComMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConstructedProtocolMessage
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCommandInstance
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstructProtocolString
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_warning_MSG
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mains_status
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmittCalibConstants
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmittRequestedResult
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_transmittWeldToPE
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_transmittPhasesToPE
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_transmittOnePhaseToPE
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_transmittMainsToWeld
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_transmittMainsToClass2
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_UnlStop_peak
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_UnlStop_RMS
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_UnlStart_peak
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_UnlStart_RMS
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_phasesToPE
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_onePhaseToPE
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_WeldToPE_Stop
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_WeldToPE
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToWeld_Stop
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToWeld
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToClass2_Stop
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToClass2
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_weld
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_weld
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitWelding
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldingRPEStop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldingRPEStart
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopMainsMeasurement
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startMainsMeasurement
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredVoltage
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredTHD_V
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredTHD_C
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredPowerS
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredPowerR
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredPF
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredCurrent
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_mach
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_transmittPhasesToPE
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_transmittOnePhaseToPE
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_URES_Stop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_URES
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_phasesToPE
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_onePhaseToPE
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mach
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectURESContactors
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitMachines
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachinesRPEStop
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachinesRPEStart
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tramsmitt_corect_wiring_state
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cord
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_num
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cord
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitCord
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittPhasesToPE
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittPhaseToPhase
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittOnePhaseToPE
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittContiunuity
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_meas_correct_wiring
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_continuity_test
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_phasesToPE
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_phaseToPhase
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_onePhaseToPE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_command_handle
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[171]"></a>SendConstructedProtocolMessage</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, serial_com.o(i.SendConstructedProtocolMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SendConstructedProtocolMessage &rArr; transmit_func &rArr; restart_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_func
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
</UL>

<P><STRONG><a name="[173]"></a>SendTimerDeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, serial_com.o(i.SendTimerDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SendTimerDeInit &rArr; HAL_TIM_Base_DeInit &rArr; HAL_TIM_Base_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_com_deinit
</UL>

<P><STRONG><a name="[174]"></a>SendTimerInit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, serial_com.o(i.SendTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SendTimerInit &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_com_init
</UL>

<P><STRONG><a name="[9b]"></a>SynchronusProcess</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, serial_com.o(i.SynchronusProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SynchronusProcess &rArr; transmittEmptyStr &rArr; SerialSend &rArr; CDC_Transmit_FS &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_function
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmittEmptyStr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> serial_com.o(i.SynchronusProcess)
<LI> serial_com.o(i.serial_com_init)
</UL>
<P><STRONG><a name="[1e]"></a>SysTick_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[17b]"></a>SystemClock_Config</STRONG> (Thumb, 166 bytes, Stack size 120 bytes, clock.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableSDADC
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f3xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, serial_com.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM2_IRQHandler &rArr; restart_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; TIMER3_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM7_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = TIM7_IRQHandler &rArr; TIMER7_IRQHandler &rArr; disconnectURESContactors &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_IRQHandler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[17f]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER3_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>TIMER7_IRQHandler</STRONG> (Thumb, 490 bytes, Stack size 24 bytes, timer.o(i.TIMER7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = TIMER7_IRQHandler &rArr; disconnectURESContactors &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sinchro_interrupt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectURESContactors
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_InjectedStart_IT
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_InjectedStart
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f3xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[134]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f3xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
</UL>

<P><STRONG><a name="[128]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f3xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[12e]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f3xx_hal_tim.o(i.TIM_TI1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[102]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32f3xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
</UL>

<P><STRONG><a name="[103]"></a>UART_CheckIdleState</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f3xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
</UL>

<P><STRONG><a name="[101]"></a>UART_SetConfig</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, stm32f3xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
</UL>

<P><STRONG><a name="[183]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f3xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[d0]"></a>USBConnected_Handler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, comunication.o(i.USBConnected_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBConnected_Handler &rArr; restart_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[9]"></a>USBD_CDC_GetDeviceQualifierDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetDeviceQualifierDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[c3]"></a>USBD_CDC_ReceivePacket</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_CDC_ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS
</UL>

<P><STRONG><a name="[154]"></a>USBD_CDC_RegisterInterface</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_RegisterInterface))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[c1]"></a>USBD_CDC_SetRxBuffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_SetRxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_FS
</UL>

<P><STRONG><a name="[c0]"></a>USBD_CDC_SetTxBuffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_SetTxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Transmit_FS
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_FS
</UL>

<P><STRONG><a name="[c5]"></a>USBD_CDC_TransmitPacket</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_CDC_TransmitPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Transmit_FS
</UL>

<P><STRONG><a name="[1ac]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[191]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[192]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[18f]"></a>USBD_CtlError</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>

<P><STRONG><a name="[18c]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
</UL>

<P><STRONG><a name="[194]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[18b]"></a>USBD_CtlSendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
</UL>

<P><STRONG><a name="[190]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>

<P><STRONG><a name="[13]"></a>USBD_FS_ConfigStrDescriptor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_FS_DeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBD_FS_InterfaceStrDescriptor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBD_FS_LangIDStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_FS_ManufacturerStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBD_FS_ProductStrDescriptor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBD_FS_SerialStrDescriptor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_SerialStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[195]"></a>USBD_GetString</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetLen
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_SerialStrDescriptor
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ProductStrDescriptor
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ManufacturerStrDescriptor
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_InterfaceStrDescriptor
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[152]"></a>USBD_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[19b]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[186]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[df]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[e1]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[185]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_GetRxDataSize))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataOut
</UL>

<P><STRONG><a name="[19a]"></a>USBD_LL_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_PMAConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[1ae]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[188]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<P><STRONG><a name="[18a]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[f0]"></a>USBD_LL_Reset</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[f1]"></a>USBD_LL_Resume</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[f2]"></a>USBD_LL_SOF</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[ef]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[1a2]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SetUSBAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[f4]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[193]"></a>USBD_LL_StallEP</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>

<P><STRONG><a name="[1a8]"></a>USBD_LL_Start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[f7]"></a>USBD_LL_Suspend</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[18d]"></a>USBD_LL_Transmit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[1a3]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[153]"></a>USBD_RegisterClass</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[19e]"></a>USBD_RunTestMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1ab]"></a>USBD_SetClassConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[155]"></a>USBD_Start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1a4]"></a>USBD_StdDevReq</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1a6]"></a>USBD_StdEPReq</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1a5]"></a>USBD_StdItfReq</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[187]"></a>USBD_static_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_free))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[189]"></a>USBD_static_malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<P><STRONG><a name="[5b]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.USB_LP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USB_LP_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; PCD_EP_ISR_Handler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>USB_Receive_FS</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb.o(i.USB_Receive_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_Receive_FS &rArr; add_command_to_queue &rArr; set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_command_to_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS
</UL>

<P><STRONG><a name="[1a]"></a>UsageFault_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[1b0]"></a>WeldMachMt310_RelInit</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, com_meas_tasks.o(i.WeldMachMt310_RelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WeldMachMt310_RelInit &rArr; rst_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldingInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[1b1]"></a>WeldRstRels</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, welding.o(i.WeldRstRels))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WeldRstRels &rArr; set_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_UnlStop_peak
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_UnlStop_RMS
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_UNL_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToWeldClass2_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldingRPEStart
</UL>

<P><STRONG><a name="[1b2]"></a>WeldingInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, welding.o(i.WeldingInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WeldingInit &rArr; WeldMachMt310_RelInit &rArr; rst_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldMachMt310_RelInit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_weld
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_weld
</UL>

<P><STRONG><a name="[85]"></a>WeldingRPEStart</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, welding.o(i.WeldingRPEStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = WeldingRPEStart &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldRstRels
</UL>
<BR>[Address Reference Count : 2]<UL><LI> welding.o(i.init_weld)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[86]"></a>WeldingRPEStop</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, welding.o(i.WeldingRPEStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = WeldingRPEStop &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[144]"></a>_Error_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC3_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC2_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC1_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTimerInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTimerDeInit
</UL>

<P><STRONG><a name="[1b3]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[239]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[cb]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmittCalibConstants
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmittRequestedResult
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredVoltage
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredTHD_V
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredTHD_C
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredPowerS
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredPowerR
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredPF
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredCurrent
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittContiunuity
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstructProtocolString
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmittEmptyStr
</UL>

<P><STRONG><a name="[23a]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[23b]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1b5]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[23c]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1ee]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mains_status
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_transmittWeldToPE
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_transmittPhasesToPE
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_transmittOnePhaseToPE
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_transmittMainsToWeld
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_transmittMainsToClass2
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_transmittPhasesToPE
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_transmittOnePhaseToPE
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tramsmitt_corect_wiring_state
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittPhasesToPE
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittPhaseToPhase
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittOnePhaseToPE
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittContiunuity
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_command_handle
</UL>

<P><STRONG><a name="[23d]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[23e]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[23f]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[1b6]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RISO_weld_resistance
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RISO_mach_resistance
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RPE_cord_resistance
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RISO_cord_resistance
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConstant
</UL>

<P><STRONG><a name="[1b7]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[240]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[241]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[242]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1b8]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[be]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1af]"></a>add_command_to_queue</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, serial_com.o(i.add_command_to_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = add_command_to_queue &rArr; set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_event
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSendTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Receive_FS
</UL>

<P><STRONG><a name="[204]"></a>arm_biquad_cascade_df1_f32</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, arm_biquad_cascade_df1_f32.o(i.arm_biquad_cascade_df1_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arm_biquad_cascade_df1_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_UNPE
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_ULN_Voltage
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_UL1PE
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_IL_Current
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_IDIFF
</UL>

<P><STRONG><a name="[1c4]"></a>arm_bitreversal_32</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, arm_cfft_f32.o(i.arm_bitreversal_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arm_bitreversal_32
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_f32
</UL>

<P><STRONG><a name="[1c0]"></a>arm_cfft_f32</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, arm_cfft_f32.o(i.arm_cfft_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = arm_cfft_f32 &rArr; arm_cfft_radix8by4_f32 &rArr; arm_radix8_butterfly_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_radix8_butterfly_f32
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_radix8by4_f32
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_radix8by2_f32
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bitreversal_32
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_THD_with_FFT
</UL>

<P><STRONG><a name="[1c1]"></a>arm_cfft_radix8by2_f32</STRONG> (Thumb, 456 bytes, Stack size 96 bytes, arm_cfft_f32.o(i.arm_cfft_radix8by2_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = arm_cfft_radix8by2_f32 &rArr; arm_radix8_butterfly_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_radix8_butterfly_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_f32
</UL>

<P><STRONG><a name="[1c2]"></a>arm_cfft_radix8by4_f32</STRONG> (Thumb, 1174 bytes, Stack size 128 bytes, arm_cfft_f32.o(i.arm_cfft_radix8by4_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = arm_cfft_radix8by4_f32 &rArr; arm_radix8_butterfly_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_radix8_butterfly_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_f32
</UL>

<P><STRONG><a name="[1c5]"></a>arm_cmplx_mag_f32</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, arm_cmplx_mag_f32.o(i.arm_cmplx_mag_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arm_cmplx_mag_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sqrt_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_THD_with_FFT
</UL>

<P><STRONG><a name="[205]"></a>arm_cos_f32</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, arm_cos_f32.o(i.arm_cos_f32))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_ULN_Voltage
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_IL_Current
</UL>

<P><STRONG><a name="[1c3]"></a>arm_radix8_butterfly_f32</STRONG> (Thumb, 1478 bytes, Stack size 180 bytes, arm_cfft_radix8_f32.o(i.arm_radix8_butterfly_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = arm_radix8_butterfly_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_f32
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_radix8by4_f32
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_radix8by2_f32
</UL>

<P><STRONG><a name="[91]"></a>calibMeasure</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, calibration.o(i.calibMeasure))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = calibMeasure &rArr; transmittRequestedResult &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_task
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_measure
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measure_no_THD
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connected_device
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmittRequestedResult
</UL>
<BR>[Address Reference Count : 2]<UL><LI> calibration.o(i.calibMeasure)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[1cc]"></a>checkUSBconnected</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, comunication.o(i.checkUSBconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = checkUSBconnected &rArr; disconnect_function &rArr; serial_com_deinit &rArr; SendTimerDeInit &rArr; HAL_TIM_Base_DeInit &rArr; HAL_TIM_Base_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_com_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_function
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbCheckTask
</UL>

<P><STRONG><a name="[96]"></a>compute_THD_with_FFT</STRONG> (Thumb, 656 bytes, Stack size 48 bytes, do_task.o(i.compute_THD_with_FFT))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = compute_THD_with_FFT &rArr; arm_cfft_f32 &rArr; arm_cfft_radix8by4_f32 &rArr; arm_radix8_butterfly_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_THD
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cmplx_mag_f32
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cfft_f32
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sqrt_f32
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sdadc.o(i.measure_IL_Current)
<LI> sdadc.o(i.measure_ULN_Voltage)
</UL>
<P><STRONG><a name="[98]"></a>compute_rms</STRONG> (Thumb, 928 bytes, Stack size 32 bytes, sdadc.o(i.compute_rms))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = compute_rms &rArr; stop_measure &rArr; input_STOP_measure &rArr; HAL_SDADC_InjectedStop_IT &rArr; SDADC_InjConvStop &rArr; SDADC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_measure
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sqrt_f32
</UL>
<BR>[Address Reference Count : 2]<UL><LI> do_task.o(i.measuring_task_fft)
<LI> do_task.o(i.measuring_task_no_THD)
</UL>
<P><STRONG><a name="[1e2]"></a>cord_RISO_init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, cord.o(i.cord_RISO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cord_RISO_init &rArr; set_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_phasesToPE
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_onePhaseToPE
</UL>

<P><STRONG><a name="[71]"></a>cord_RISO_onePhaseToPE</STRONG> (Thumb, 1486 bytes, Stack size 32 bytes, cord.o(i.cord_RISO_onePhaseToPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = cord_RISO_onePhaseToPE &rArr; cord_transmittPhasesToPE &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittPhasesToPE
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittOnePhaseToPE
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_check_RISO_resistance
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cord.o(i.cord_RISO_onePhaseToPE)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[72]"></a>cord_RISO_phaseToPhase</STRONG> (Thumb, 1588 bytes, Stack size 32 bytes, cord.o(i.cord_RISO_phaseToPhase))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = cord_RISO_phaseToPhase &rArr; cord_transmittPhaseToPhase &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittPhaseToPhase
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_check_RISO_resistance
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cord.o(i.cord_RISO_phaseToPhase)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[70]"></a>cord_RISO_phasesToPE</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, cord.o(i.cord_RISO_phasesToPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = cord_RISO_phasesToPE &rArr; cord_transmittPhasesToPE &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittPhasesToPE
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_check_RISO_resistance
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cord.o(i.cord_RISO_phasesToPE)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[1e3]"></a>cord_check_RISO_resistance</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cord.o(i.cord_check_RISO_resistance))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_phasesToPE
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_phaseToPhase
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_onePhaseToPE
</UL>

<P><STRONG><a name="[1eb]"></a>cord_check_RPE_resistance</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cord.o(i.cord_check_RPE_resistance))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_meas_correct_wiring
</UL>

<P><STRONG><a name="[1e7]"></a>cord_continuity_init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, cord.o(i.cord_continuity_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cord_continuity_init &rArr; set_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_continuity_test
</UL>

<P><STRONG><a name="[6f]"></a>cord_continuity_test</STRONG> (Thumb, 1108 bytes, Stack size 40 bytes, cord.o(i.cord_continuity_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = cord_continuity_test &rArr; cord_transmittContiunuity &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_transmittContiunuity
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_continuity_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cord.o(i.cord_continuity_test)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[1e9]"></a>cord_correct_wiring_init</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, cord.o(i.cord_correct_wiring_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cord_correct_wiring_init &rArr; set_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cord
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_meas_correct_wiring
</UL>

<P><STRONG><a name="[1ea]"></a>cord_global_init_set</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, cord.o(i.cord_global_init_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cord_global_init_set &rArr; set_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cord
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cord
</UL>

<P><STRONG><a name="[6e]"></a>cord_meas_correct_wiring</STRONG> (Thumb, 14256 bytes, Stack size 56 bytes, cord.o(i.cord_meas_correct_wiring))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = cord_meas_correct_wiring &rArr; tramsmitt_corect_wiring_state &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_event
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tramsmitt_corect_wiring_state
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numberOfSetBits
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_correct_wiring_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_check_RPE_resistance
</UL>
<BR>[Address Reference Count : 3]<UL><LI> cord.o(i.init_cord)
<LI> cord.o(i.cord_meas_correct_wiring)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[1e8]"></a>cord_transmittContiunuity</STRONG> (Thumb, 292 bytes, Stack size 224 bytes, cord.o(i.cord_transmittContiunuity))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = cord_transmittContiunuity &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_continuity_test
</UL>

<P><STRONG><a name="[1e5]"></a>cord_transmittOnePhaseToPE</STRONG> (Thumb, 154 bytes, Stack size 128 bytes, cord.o(i.cord_transmittOnePhaseToPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = cord_transmittOnePhaseToPE &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_onePhaseToPE
</UL>

<P><STRONG><a name="[1e6]"></a>cord_transmittPhaseToPhase</STRONG> (Thumb, 200 bytes, Stack size 128 bytes, cord.o(i.cord_transmittPhaseToPhase))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = cord_transmittPhaseToPhase &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_phaseToPhase
</UL>

<P><STRONG><a name="[1e4]"></a>cord_transmittPhasesToPE</STRONG> (Thumb, 60 bytes, Stack size 128 bytes, cord.o(i.cord_transmittPhasesToPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = cord_transmittPhasesToPE &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_phasesToPE
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_onePhaseToPE
</UL>

<P><STRONG><a name="[6d]"></a>deinitCord</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, cord.o(i.deinitCord))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = deinitCord &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_task
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNormal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[75]"></a>deinitMachines</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, machines.o(i.deinitMachines))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = deinitMachines &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_task
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sinchro_interrupt
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNormal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[81]"></a>deinitWelding</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, welding.o(i.deinitWelding))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = deinitWelding &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_task
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sinchro_interrupt
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNormal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[182]"></a>disable_sinchro_interrupt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, do_task.o(i.disable_sinchro_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disable_sinchro_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_measure
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_IRQHandler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_weld
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitWelding
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_mach
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_URES_Stop
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitMachines
</UL>

<P><STRONG><a name="[181]"></a>disconnectURESContactors</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, machines.o(i.disconnectURESContactors))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = disconnectURESContactors &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>disconnect_function</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, comunication.o(i.disconnect_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = disconnect_function &rArr; serial_com_deinit &rArr; SendTimerDeInit &rArr; HAL_TIM_Base_DeInit &rArr; HAL_TIM_Base_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_com_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkUSBconnected
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronusProcess
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[214]"></a>do_events</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, os.o(i.do_events))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = do_events
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_OS
</UL>

<P><STRONG><a name="[1f2]"></a>enable_sinchro_interrupt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, do_task.o(i.enable_sinchro_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enable_sinchro_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroSetContactor
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measure_no_THD
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measure
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_URES_init
</UL>

<P><STRONG><a name="[1cb]"></a>end_task</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os.o(i.end_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = end_task &rArr; free_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_timer
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_measure
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibMeasure
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_weld
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitWelding
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_mach
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitMachines
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cord
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitCord
</UL>

<P><STRONG><a name="[176]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_com_deinit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_command_handle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinchronusTransmittFunc
</UL>

<P><STRONG><a name="[1f4]"></a>free_event</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os.o(i.free_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_task
</UL>

<P><STRONG><a name="[1f3]"></a>free_timer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os.o(i.free_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_task
</UL>

<P><STRONG><a name="[1c7]"></a>get_connected_device</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, do_task.o(i.get_connected_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_connected_device
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mains_status
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibMeasure
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_weld
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startMainsMeasurement
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mach
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_num
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cord
</UL>

<P><STRONG><a name="[d2]"></a>get_inst_value</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, sdadc.o(i.get_inst_value))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[1f5]"></a>get_phase_seq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, do_task.o(i.get_phase_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_phase_seq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_test
</UL>

<P><STRONG><a name="[206]"></a>get_value</STRONG> (Thumb, 322 bytes, Stack size 28 bytes, sdadc.o(i.get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_test
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmittCalibConstants
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmittRequestedResult
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredVoltage
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredTHD_V
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredTHD_C
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredPowerS
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredPowerR
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredPF
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredCurrent
</UL>

<P><STRONG><a name="[1f7]"></a>init_OS</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, os.o(i.init_OS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_OS
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timers
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event_Q
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fa]"></a>init_REL</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rel_driver.o(i.init_REL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_REL &rArr; reset_all_REL
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_all_REL
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>init_cord</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, cord.o(i.init_cord))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = init_cord &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connected_device
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_event
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNormal
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_global_init_set
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_correct_wiring_init
</UL>
<BR>[Address Reference Count : 3]<UL><LI> cord.o(i.init_cord)
<LI> cord.o(i.cord_meas_correct_wiring)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[1f9]"></a>init_event_Q</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os.o(i.init_event_Q))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_OS
</UL>

<P><STRONG><a name="[74]"></a>init_mach</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, machines.o(i.init_mach))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = init_mach &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connected_device
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_event
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNormal
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachinesInit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> machines.o(i.init_mach)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[1f8]"></a>init_timers</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os.o(i.init_timers))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_OS
</UL>

<P><STRONG><a name="[80]"></a>init_weld</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, welding.o(i.init_weld))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = init_weld &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connected_device
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_event
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNormal
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldingInit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> welding.o(i.init_weld)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[21a]"></a>input_START_measure</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sdadc.o(i.input_START_measure))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measure_no_THD
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measure
</UL>

<P><STRONG><a name="[1fb]"></a>input_STOP_measure</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sdadc.o(i.input_STOP_measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = input_STOP_measure &rArr; HAL_SDADC_InjectedStop_IT &rArr; SDADC_InjConvStop &rArr; SDADC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_InjectedStop_IT
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_InjectedStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_measure
</UL>

<P><STRONG><a name="[9a]"></a>led_blinking_task</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, do_task.o(i.led_blinking_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = led_blinking_task &rArr; set_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> do_task.o(i.led_blinking_task)
<LI> do_task.o(i.power_on_test)
</UL>
<P><STRONG><a name="[1d6]"></a>machOPENcontactors</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, machines.o(i.machOPENcontactors))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[1fd]"></a>mach_RISO_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, machines.o(i.mach_RISO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mach_RISO_init &rArr; MachRstRels &rArr; set_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachRstRels
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_phasesToPE
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_onePhaseToPE
</UL>

<P><STRONG><a name="[77]"></a>mach_RISO_onePhaseToPE</STRONG> (Thumb, 1442 bytes, Stack size 32 bytes, machines.o(i.mach_RISO_onePhaseToPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = mach_RISO_onePhaseToPE &rArr; mach_transmittPhasesToPE &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_transmittPhasesToPE
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_transmittOnePhaseToPE
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_check_RISO_resistance
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> machines.o(i.mach_RISO_onePhaseToPE)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[76]"></a>mach_RISO_phasesToPE</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, machines.o(i.mach_RISO_phasesToPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = mach_RISO_phasesToPE &rArr; mach_transmittPhasesToPE &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_transmittPhasesToPE
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_check_RISO_resistance
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> machines.o(i.mach_RISO_phasesToPE)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[7b]"></a>mach_URES</STRONG> (Thumb, 822 bytes, Stack size 32 bytes, machines.o(i.mach_URES))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = mach_URES &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_URES_init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectURESContactors
</UL>
<BR>[Address Reference Count : 2]<UL><LI> machines.o(i.mach_URES)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[7c]"></a>mach_URES_Stop</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, machines.o(i.mach_URES_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = mach_URES_Stop &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sinchro_interrupt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> machines.o(i.mach_URES)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[201]"></a>mach_URES_init</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, machines.o(i.mach_URES_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mach_URES_init &rArr; set_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sinchro_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_URES
</UL>

<P><STRONG><a name="[1fe]"></a>mach_check_RISO_resistance</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, machines.o(i.mach_check_RISO_resistance))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_phasesToPE
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_onePhaseToPE
</UL>

<P><STRONG><a name="[200]"></a>mach_transmittOnePhaseToPE</STRONG> (Thumb, 154 bytes, Stack size 128 bytes, machines.o(i.mach_transmittOnePhaseToPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = mach_transmittOnePhaseToPE &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_onePhaseToPE
</UL>

<P><STRONG><a name="[1ff]"></a>mach_transmittPhasesToPE</STRONG> (Thumb, 60 bytes, Stack size 128 bytes, machines.o(i.mach_transmittPhasesToPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = mach_transmittPhasesToPE &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_phasesToPE
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_onePhaseToPE
</UL>

<P><STRONG><a name="[5f]"></a>main</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_event
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInitConstants
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_OS
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_REL
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_OS
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC3_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC2_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDADC1_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBConnected_Handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[217]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_func
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_handler
</UL>

<P><STRONG><a name="[1ec]"></a>numberOfSetBits</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cord.o(i.numberOfSetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tramsmitt_corect_wiring_state
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_meas_correct_wiring
</UL>

<P><STRONG><a name="[93]"></a>power_on_test</STRONG> (Thumb, 826 bytes, Stack size 32 bytes, do_task.o(i.power_on_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = power_on_test &rArr; stop_measure &rArr; input_STOP_measure &rArr; HAL_SDADC_InjectedStop_IT &rArr; SDADC_InjConvStop &rArr; SDADC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_measure
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measure_no_THD
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_phase_seq
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_event
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 5]<UL><LI> main.o(i.main)
<LI> cord.o(i.init_cord)
<LI> machines.o(i.init_mach)
<LI> welding.o(i.init_weld)
<LI> do_task.o(i.power_on_test)
</UL>
<P><STRONG><a name="[207]"></a>printErrorMsg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.printErrorMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = printErrorMsg &rArr; CDC_Transmit_FS &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Transmit_FS
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
</UL>

<P><STRONG><a name="[1d0]"></a>reset_all_REL</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rel_driver.o(i.reset_all_REL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reset_all_REL
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_REL
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[177]"></a>restart_timer</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, os.o(i.restart_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = restart_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_test
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBConnected_Handler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibMeasure
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_phasesToPE
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_onePhaseToPE
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_WeldToPE
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToWeld
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToClass2
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_weld
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_URES
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_phasesToPE
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_onePhaseToPE
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mach
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cord
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_meas_correct_wiring
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_continuity_test
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_phasesToPE
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_phaseToPhase
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_onePhaseToPE
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbCheckTask
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronusProcess
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_func
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_command_handle
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinchronusTransmittFunc
</UL>

<P><STRONG><a name="[7f]"></a>returnMeasuredTask</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, com_meas_tasks.o(i.returnMeasuredTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = returnMeasuredTask &rArr; returnMeasueredVoltage &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredVoltage
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredTHD_V
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredTHD_C
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredPowerS
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredPowerR
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredPF
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasueredCurrent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[157]"></a>rst_REL</STRONG> (Thumb, 932 bytes, Stack size 8 bytes, rel_driver.o(i.rst_REL))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rst_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Send_data
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sel_REL_DRIVER
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroSetContactor
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNormal
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_onePhaseToPE
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldingRPEStop
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldRstRels
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldMachMt310_RelInit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_URES_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_URES_Stop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_URES
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_onePhaseToPE
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectURESContactors
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachinesRPEStop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachinesInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachRstRels
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_meas_correct_wiring
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_global_init_set
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_correct_wiring_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_continuity_test
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_continuity_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_phaseToPhase
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_onePhaseToPE
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[203]"></a>run_OS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os.o(i.run_OS))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + In Cycle
<LI>Call Chain = run_OS &rArr;  run_OS (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_OS
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_timers
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_events
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_OS
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>send_mains_status</STRONG> (Thumb, 452 bytes, Stack size 144 bytes, do_task.o(i.send_mains_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = send_mains_status &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connected_device
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 5]<UL><LI> main.o(i.start_set_normal)
<LI> cord.o(i.init_cord)
<LI> machines.o(i.init_mach)
<LI> welding.o(i.init_weld)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[6a]"></a>send_warning_MSG</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, comunication.o(i.send_warning_MSG))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = send_warning_MSG &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> do_task.o(i.power_on_test)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[1f1]"></a>serial_com_deinit</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, serial_com.o(i.serial_com_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = serial_com_deinit &rArr; SendTimerDeInit &rArr; HAL_TIM_Base_DeInit &rArr; HAL_TIM_Base_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTimerDeInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_function
</UL>

<P><STRONG><a name="[1cd]"></a>serial_com_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, serial_com.o(i.serial_com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = serial_com_init &rArr; SendTimerInit &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_event
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTimerInit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronusSendInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkUSBconnected
</UL>

<P><STRONG><a name="[213]"></a>service_timers</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, os.o(i.service_timers))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = service_timers &rArr; set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_OS
</UL>

<P><STRONG><a name="[1d9]"></a>setConstant</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, sdadc.o(i.setConstant))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = setConstant &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[202]"></a>setInitConstants</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, sdadc.o(i.setInitConstants))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f0]"></a>setNormal</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, com_meas_tasks.o(i.setNormal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = setNormal &rArr; set_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_set_normal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_weld
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitWelding
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mach
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitMachines
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cord
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinitCord
</UL>

<P><STRONG><a name="[158]"></a>set_REL</STRONG> (Thumb, 942 bytes, Stack size 8 bytes, rel_driver.o(i.set_REL))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Send_data
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sel_REL_DRIVER
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroSetContactor
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNormal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_IRQHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_UnlStart_peak
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_UnlStart_RMS
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_phasesToPE
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_onePhaseToPE
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_WeldToPE
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToWeld
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToClass2
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldingRPEStart
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldRstRels
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_URES_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_URES
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_phasesToPE
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_onePhaseToPE
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_RISO_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachinesRPEStart
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachRstRels
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_meas_correct_wiring
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_global_init_set
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_correct_wiring_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_continuity_test
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_continuity_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_phasesToPE
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_phaseToPhase
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_onePhaseToPE
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_RISO_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[1d3]"></a>set_RISO_cord_resistance</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cord.o(i.set_RISO_cord_resistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_RISO_cord_resistance &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[1d5]"></a>set_RISO_mach_resistance</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, machines.o(i.set_RISO_mach_resistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_RISO_mach_resistance &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[1d8]"></a>set_RISO_weld_resistance</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, welding.o(i.set_RISO_weld_resistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_RISO_weld_resistance &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[1d2]"></a>set_RPE_cord_resistance</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cord.o(i.set_RPE_cord_resistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_RPE_cord_resistance &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[219]"></a>set_SDADC_zero</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sdadc.o(i.set_SDADC_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_SDADC_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measure_no_THD
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measure
</UL>

<P><STRONG><a name="[1be]"></a>set_event</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, os.o(i.set_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measuring_task_no_THD
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measuring_task_fft
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_test
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_set_normal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_weld
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mach
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cord
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_meas_correct_wiring
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_timers
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_ULN_Voltage
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_IL_Current
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_com_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_command_to_queue
</UL>

<P><STRONG><a name="[1d1]"></a>set_phase_num</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cord.o(i.set_phase_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = set_phase_num &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connected_device
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[1d4]"></a>set_phase_num_mach</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, machines.o(i.set_phase_num_mach))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[1d7]"></a>set_phase_num_weld</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, welding.o(i.set_phase_num_weld))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[140]"></a>set_timer</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, os.o(i.set_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measure_no_THD
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measure
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blinking_task
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measuring_task_no_THD
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measuring_task_fft
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_test
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_flash_task
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_set_normal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_weld
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_URES
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mach
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cord
</UL>

<P><STRONG><a name="[13d]"></a>stackDump</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.stackDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stackDump &rArr; printErrorMsg &rArr; CDC_Transmit_FS &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printErrorMsg
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[7d]"></a>startMainsMeasurement</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, com_meas_tasks.o(i.startMainsMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = startMainsMeasurement &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroSetContactor
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measure
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connected_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[1cf]"></a>start_measure</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, do_task.o(i.start_measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = start_measure &rArr; set_SDADC_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_SDADC_zero
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_START_measure
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IL_setGain
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sinchro_interrupt
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startMainsMeasurement
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[1c8]"></a>start_measure_no_THD</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, do_task.o(i.start_measure_no_THD))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = start_measure_no_THD &rArr; set_SDADC_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_SDADC_zero
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_START_measure
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IL_setGain
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sinchro_interrupt
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_test
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibMeasure
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[7e]"></a>stopMainsMeasurement</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, com_meas_tasks.o(i.stopMainsMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = stopMainsMeasurement &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_measure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[73]"></a>stop_cord</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, cord.o(i.stop_cord))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = stop_cord &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_task
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_global_init_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[78]"></a>stop_mach</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, machines.o(i.stop_mach))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = stop_mach &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_task
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sinchro_interrupt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MachinesInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[1ca]"></a>stop_measure</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, do_task.o(i.stop_measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stop_measure &rArr; input_STOP_measure &rArr; HAL_SDADC_InjectedStop_IT &rArr; SDADC_InjConvStop &rArr; SDADC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_STOP_measure
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_task
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sinchro_interrupt
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rms
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_test
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibMeasure
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopMainsMeasurement
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
</UL>

<P><STRONG><a name="[84]"></a>stop_weld</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, welding.o(i.stop_weld))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = stop_weld &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_task
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sinchro_interrupt
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldingInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[1e1]"></a>synchroSetContactor</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, do_task.o(i.synchroSetContactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = synchroSetContactor &rArr; set_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sinchro_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_UnlStart_peak
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_UnlStart_RMS
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startMainsMeasurement
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectURESContactors
</UL>

<P><STRONG><a name="[1ed]"></a>tramsmitt_corect_wiring_state</STRONG> (Thumb, 3906 bytes, Stack size 160 bytes, cord.o(i.tramsmitt_corect_wiring_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tramsmitt_corect_wiring_state &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numberOfSetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cord_meas_correct_wiring
</UL>

<P><STRONG><a name="[92]"></a>transmittCalibConstants</STRONG> (Thumb, 210 bytes, Stack size 248 bytes, calibration.o(i.transmittCalibConstants))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = transmittCalibConstants &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[66]"></a>usbCheckTask</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, comunication.o(i.usbCheckTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usbCheckTask &rArr; checkUSBconnected &rArr; disconnect_function &rArr; serial_com_deinit &rArr; SendTimerDeInit &rArr; HAL_TIM_Base_DeInit &rArr; HAL_TIM_Base_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkUSBconnected
</UL>
<BR>[Address Reference Count : 2]<UL><LI> comunication.o(i.USBConnected_Handler)
<LI> comunication.o(i.usbCheckTask)
</UL>
<P><STRONG><a name="[8b]"></a>weld_RISO_MainsToClass2</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, welding.o(i.weld_RISO_MainsToClass2))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = weld_RISO_MainsToClass2 &rArr; weld_transmittMainsToClass2 &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_transmittMainsToClass2
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_check_RISO_resistance
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToWeldClass2_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> welding.o(i.weld_RISO_MainsToClass2)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[8c]"></a>weld_RISO_MainsToClass2_Stop</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, welding.o(i.weld_RISO_MainsToClass2_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = weld_RISO_MainsToClass2_Stop &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToWeldClass2_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[87]"></a>weld_RISO_MainsToWeld</STRONG> (Thumb, 450 bytes, Stack size 32 bytes, welding.o(i.weld_RISO_MainsToWeld))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = weld_RISO_MainsToWeld &rArr; weld_transmittMainsToWeld &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_transmittMainsToWeld
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_check_RISO_resistance
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToWeldClass2_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> welding.o(i.weld_RISO_MainsToWeld)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[21c]"></a>weld_RISO_MainsToWeldClass2_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, welding.o(i.weld_RISO_MainsToWeldClass2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = weld_RISO_MainsToWeldClass2_init &rArr; WeldRstRels &rArr; set_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldRstRels
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_WeldToPE_Stop
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_WeldToPE
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToWeld_Stop
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToWeld
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToClass2_Stop
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToClass2
</UL>

<P><STRONG><a name="[88]"></a>weld_RISO_MainsToWeld_Stop</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, welding.o(i.weld_RISO_MainsToWeld_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = weld_RISO_MainsToWeld_Stop &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToWeldClass2_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[89]"></a>weld_RISO_WeldToPE</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, welding.o(i.weld_RISO_WeldToPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = weld_RISO_WeldToPE &rArr; weld_transmittWeldToPE &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_transmittWeldToPE
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_check_RISO_resistance
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToWeldClass2_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> welding.o(i.weld_RISO_WeldToPE)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[8a]"></a>weld_RISO_WeldToPE_Stop</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, welding.o(i.weld_RISO_WeldToPE_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = weld_RISO_WeldToPE_Stop &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToWeldClass2_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[221]"></a>weld_RISO_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, welding.o(i.weld_RISO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = weld_RISO_init &rArr; WeldRstRels &rArr; set_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldRstRels
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_phasesToPE
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_onePhaseToPE
</UL>

<P><STRONG><a name="[83]"></a>weld_RISO_onePhaseToPE</STRONG> (Thumb, 1442 bytes, Stack size 32 bytes, welding.o(i.weld_RISO_onePhaseToPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = weld_RISO_onePhaseToPE &rArr; weld_transmittPhasesToPE &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_transmittPhasesToPE
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_transmittOnePhaseToPE
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_check_RISO_resistance
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> welding.o(i.weld_RISO_onePhaseToPE)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[82]"></a>weld_RISO_phasesToPE</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, welding.o(i.weld_RISO_phasesToPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = weld_RISO_phasesToPE &rArr; weld_transmittPhasesToPE &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_transmittPhasesToPE
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_check_RISO_resistance
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> welding.o(i.weld_RISO_phasesToPE)
<LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[224]"></a>weld_UNL_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, welding.o(i.weld_UNL_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = weld_UNL_init &rArr; WeldRstRels &rArr; set_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldRstRels
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_UnlStart_peak
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_UnlStart_RMS
</UL>

<P><STRONG><a name="[8d]"></a>weld_UnlStart_RMS</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, welding.o(i.weld_UnlStart_RMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = weld_UnlStart_RMS &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroSetContactor
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_UNL_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[8f]"></a>weld_UnlStart_peak</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, welding.o(i.weld_UnlStart_peak))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = weld_UnlStart_peak &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroSetContactor
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_UNL_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[8e]"></a>weld_UnlStop_RMS</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, welding.o(i.weld_UnlStop_RMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = weld_UnlStop_RMS &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldRstRels
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[90]"></a>weld_UnlStop_peak</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, welding.o(i.weld_UnlStop_peak))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = weld_UnlStop_peak &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldRstRels
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.command_analyze)
</UL>
<P><STRONG><a name="[21d]"></a>weld_check_RISO_resistance</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, welding.o(i.weld_check_RISO_resistance))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_phasesToPE
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_onePhaseToPE
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_WeldToPE
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToWeld
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToClass2
</UL>

<P><STRONG><a name="[21e]"></a>weld_transmittMainsToClass2</STRONG> (Thumb, 60 bytes, Stack size 128 bytes, welding.o(i.weld_transmittMainsToClass2))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = weld_transmittMainsToClass2 &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToClass2
</UL>

<P><STRONG><a name="[21f]"></a>weld_transmittMainsToWeld</STRONG> (Thumb, 60 bytes, Stack size 128 bytes, welding.o(i.weld_transmittMainsToWeld))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = weld_transmittMainsToWeld &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_MainsToWeld
</UL>

<P><STRONG><a name="[223]"></a>weld_transmittOnePhaseToPE</STRONG> (Thumb, 154 bytes, Stack size 128 bytes, welding.o(i.weld_transmittOnePhaseToPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = weld_transmittOnePhaseToPE &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_onePhaseToPE
</UL>

<P><STRONG><a name="[222]"></a>weld_transmittPhasesToPE</STRONG> (Thumb, 60 bytes, Stack size 128 bytes, welding.o(i.weld_transmittPhasesToPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = weld_transmittPhasesToPE &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_phasesToPE
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_onePhaseToPE
</UL>

<P><STRONG><a name="[220]"></a>weld_transmittWeldToPE</STRONG> (Thumb, 60 bytes, Stack size 128 bytes, welding.o(i.weld_transmittWeldToPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = weld_transmittWeldToPE &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weld_RISO_WeldToPE
</UL>

<P><STRONG><a name="[1dd]"></a>write_THD</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, sdadc.o(i.write_THD))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_THD_with_FFT
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[142]"></a>MX_NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, main.o(i.MX_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_NVIC_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>start_set_normal</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.start_set_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = start_set_normal &rArr; setNormal &rArr; set_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_event
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNormal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.main)
<LI> main.o(i.start_set_normal)
</UL>
<P><STRONG><a name="[1dc]"></a>arm_sqrt_f32</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, do_task.o(i.arm_sqrt_f32))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_THD_with_FFT
</UL>

<P><STRONG><a name="[97]"></a>measuring_task_fft</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, do_task.o(i.measuring_task_fft))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = measuring_task_fft &rArr; set_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_event
</UL>
<BR>[Address Reference Count : 2]<UL><LI> do_task.o(i.measuring_task_fft)
<LI> do_task.o(i.start_measure)
</UL>
<P><STRONG><a name="[99]"></a>measuring_task_no_THD</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, do_task.o(i.measuring_task_no_THD))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = measuring_task_no_THD &rArr; set_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_event
</UL>
<BR>[Address Reference Count : 2]<UL><LI> do_task.o(i.measuring_task_no_THD)
<LI> do_task.o(i.start_measure_no_THD)
</UL>
<P><STRONG><a name="[1e0]"></a>connectURESContactors</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, machines.o(i.connectURESContactors))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = connectURESContactors &rArr; synchroSetContactor &rArr; set_REL &rArr; SPI1_Send_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synchroSetContactor
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mach_URES
</UL>

<P><STRONG><a name="[20a]"></a>returnMeasueredCurrent</STRONG> (Thumb, 194 bytes, Stack size 104 bytes, com_meas_tasks.o(i.returnMeasueredCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = returnMeasueredCurrent &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasuredTask
</UL>

<P><STRONG><a name="[20b]"></a>returnMeasueredPF</STRONG> (Thumb, 194 bytes, Stack size 104 bytes, com_meas_tasks.o(i.returnMeasueredPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = returnMeasueredPF &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasuredTask
</UL>

<P><STRONG><a name="[20c]"></a>returnMeasueredPowerR</STRONG> (Thumb, 194 bytes, Stack size 104 bytes, com_meas_tasks.o(i.returnMeasueredPowerR))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = returnMeasueredPowerR &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasuredTask
</UL>

<P><STRONG><a name="[20d]"></a>returnMeasueredPowerS</STRONG> (Thumb, 194 bytes, Stack size 104 bytes, com_meas_tasks.o(i.returnMeasueredPowerS))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = returnMeasueredPowerS &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasuredTask
</UL>

<P><STRONG><a name="[20e]"></a>returnMeasueredTHD_C</STRONG> (Thumb, 194 bytes, Stack size 104 bytes, com_meas_tasks.o(i.returnMeasueredTHD_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = returnMeasueredTHD_C &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasuredTask
</UL>

<P><STRONG><a name="[20f]"></a>returnMeasueredTHD_V</STRONG> (Thumb, 194 bytes, Stack size 104 bytes, com_meas_tasks.o(i.returnMeasueredTHD_V))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = returnMeasueredTHD_V &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasuredTask
</UL>

<P><STRONG><a name="[210]"></a>returnMeasueredVoltage</STRONG> (Thumb, 222 bytes, Stack size 128 bytes, com_meas_tasks.o(i.returnMeasueredVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = returnMeasueredVoltage &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnMeasuredTask
</UL>

<P><STRONG><a name="[1c9]"></a>transmittRequestedResult</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, calibration.o(i.transmittRequestedResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = transmittRequestedResult &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibMeasure
</UL>

<P><STRONG><a name="[18e]"></a>USBD_ClrFeature</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usbd_ctlreq.o(i.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[196]"></a>USBD_GetConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[197]"></a>USBD_GetDescriptor</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[199]"></a>USBD_GetLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_GetLen))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>

<P><STRONG><a name="[198]"></a>USBD_GetStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1a9]"></a>USBD_SetAddress</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1aa]"></a>USBD_SetConfig</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1ad]"></a>USBD_SetFeature</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_ctlreq.o(i.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[4]"></a>USBD_CDC_DataIn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_DataIn))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>USBD_CDC_DataOut</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_DataOut
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>USBD_CDC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_CDC_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_free
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBD_CDC_EP0_RxReady</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_CDC_EP0_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBD_CDC_GetFSCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetFSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBD_CDC_GetHSCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetHSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBD_CDC_GetOtherSpeedCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetOtherSpeedCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>USBD_CDC_Init</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, usbd_cdc.o(i.USBD_CDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_CDC_Init &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_malloc
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBD_CDC_Setup</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CDC_Setup &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[11d]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stm32f3xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[16e]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, stm32f3xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[16f]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f3xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[e5]"></a>PCD_EP_ISR_Handler</STRONG> (Thumb, 880 bytes, Stack size 48 bytes, stm32f3xx_hal_pcd.o(i.PCD_EP_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PCD_EP_ISR_Handler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WritePMA
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadPMA
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f3xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[12a]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f3xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[129]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f3xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[12b]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f3xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[12f]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f3xx_hal_tim.o(i.TIM_TI2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[130]"></a>TIM_TI3_SetConfig</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, stm32f3xx_hal_tim.o(i.TIM_TI3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[12d]"></a>TIM_TI4_SetConfig</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f3xx_hal_tim.o(i.TIM_TI4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[105]"></a>SDADC_EnterInitMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f3xx_hal_sdadc.o(i.SDADC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDADC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_SelectInjectedDelay
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_PrepareChannelConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_CalibrationStart
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_AssociateChannelConfig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_InjConvStop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_InjConvStart
</UL>

<P><STRONG><a name="[106]"></a>SDADC_ExitInitMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f3xx_hal_sdadc.o(i.SDADC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_SelectInjectedDelay
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_PrepareChannelConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_CalibrationStart
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_AssociateChannelConfig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_InjConvStop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_InjConvStart
</UL>

<P><STRONG><a name="[110]"></a>SDADC_GetInjChannelsNbr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f3xx_hal_sdadc.o(i.SDADC_GetInjChannelsNbr))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_InjectedConfigChannel
</UL>

<P><STRONG><a name="[112]"></a>SDADC_InjConvStart</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f3xx_hal_sdadc.o(i.SDADC_InjConvStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDADC_InjConvStart &rArr; SDADC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_ExitInitMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_InjectedStart_IT
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_InjectedStart
</UL>

<P><STRONG><a name="[115]"></a>SDADC_InjConvStop</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32f3xx_hal_sdadc.o(i.SDADC_InjConvStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDADC_InjConvStop &rArr; SDADC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_ExitInitMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_InjectedStop_IT
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDADC_InjectedStop
</UL>

<P><STRONG><a name="[1c6]"></a>arm_sqrt_f32</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, arm_cmplx_mag_f32.o(i.arm_sqrt_f32))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cmplx_mag_f32
</UL>

<P><STRONG><a name="[c]"></a>CDC_Control_FS</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.CDC_Control_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDC_Control_FS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>CDC_DeInit_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(i.CDC_DeInit_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>CDC_Init_FS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.CDC_Init_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDC_Init_FS
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>CDC_Receive_FS</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.CDC_Receive_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CDC_Receive_FS &rArr; USB_Receive_FS &rArr; add_command_to_queue &rArr; set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Receive_FS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[13e]"></a>IL_auto_gain</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, sdadc.o(i.IL_auto_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IL_auto_gain &rArr; IL_setGain
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IL_setGain
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_IL_Current
</UL>

<P><STRONG><a name="[1de]"></a>arm_sqrt_f32</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sdadc.o(i.arm_sqrt_f32))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rms
</UL>

<P><STRONG><a name="[16b]"></a>measure_IDIFF</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, sdadc.o(i.measure_IDIFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = measure_IDIFF &rArr; arm_biquad_cascade_df1_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_df1_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC3_Handler
</UL>

<P><STRONG><a name="[167]"></a>measure_IL_Current</STRONG> (Thumb, 1902 bytes, Stack size 88 bytes, sdadc.o(i.measure_IL_Current))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = measure_IL_Current &rArr; IL_auto_gain &rArr; IL_setGain
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_event
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_df1_f32
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IL_auto_gain
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC1_Handler
</UL>

<P><STRONG><a name="[16c]"></a>measure_UL1PE</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, sdadc.o(i.measure_UL1PE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = measure_UL1PE &rArr; arm_biquad_cascade_df1_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_df1_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC3_Handler
</UL>

<P><STRONG><a name="[166]"></a>measure_ULN_Voltage</STRONG> (Thumb, 1962 bytes, Stack size 88 bytes, sdadc.o(i.measure_ULN_Voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = measure_ULN_Voltage &rArr; arm_biquad_cascade_df1_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_event
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_df1_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC1_Handler
</UL>

<P><STRONG><a name="[16a]"></a>measure_UNPE</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, sdadc.o(i.measure_UNPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = measure_UNPE &rArr; arm_biquad_cascade_df1_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_df1_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC3_Handler
</UL>

<P><STRONG><a name="[211]"></a>sel_REL_DRIVER</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, rel_driver.o(i.sel_REL_DRIVER))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sel_REL_DRIVER
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
</UL>

<P><STRONG><a name="[c6]"></a>CalculateCRC</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, serial_com.o(i.CalculateCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstructProtocolString
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_return
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCRC
</UL>

<P><STRONG><a name="[c8]"></a>CheckCRC</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, serial_com.o(i.CheckCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CheckCRC &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMessage
</UL>

<P><STRONG><a name="[d3]"></a>FindAllAdditionalCmdParameters</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, serial_com.o(i.FindAllAdditionalCmdParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FindAllAdditionalCmdParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMessage
</UL>

<P><STRONG><a name="[161]"></a>GetID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_com.o(i.GetID))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMessage
</UL>

<P><STRONG><a name="[15d]"></a>ParseMessage</STRONG> (Thumb, 378 bytes, Stack size 224 bytes, serial_com.o(i.ParseMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ParseMessage &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_single
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetID
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetID
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindAllAdditionalCmdParameters
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCRC
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recieved_command_analyze
</UL>

<P><STRONG><a name="[175]"></a>SerialSend</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, serial_com.o(i.SerialSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SerialSend &rArr; CDC_Transmit_FS &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Transmit_FS
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmittEmptyStr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinchronusTransmittFunc
</UL>

<P><STRONG><a name="[160]"></a>SetID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_com.o(i.SetID))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMessage
</UL>

<P><STRONG><a name="[65]"></a>SinchronusTransmittFunc</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, serial_com.o(i.SinchronusTransmittFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SinchronusTransmittFunc &rArr; transmittEmptyStr &rArr; SerialSend &rArr; CDC_Transmit_FS &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmittEmptyStr
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialSend
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> serial_com.o(i.SinchronusTransmittFunc)
<LI> serial_com.o(i.TIM2_IRQHandler)
</UL>
<P><STRONG><a name="[216]"></a>SynchronusSendInit</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, serial_com.o(i.SynchronusSendInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SynchronusSendInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_com_init
</UL>

<P><STRONG><a name="[1ce]"></a>command_analyze</STRONG> (Thumb, 8588 bytes, Stack size 56 bytes, serial_com.o(i.command_analyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = command_analyze &rArr; set_phase_num &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_REL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_REL
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_measure
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measure_no_THD
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_measure
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_event
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_num_weld
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RISO_weld_resistance
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeldMachMt310_RelInit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_num_mach
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RISO_mach_resistance
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machOPENcontactors
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phase_num
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RPE_cord_resistance
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RISO_cord_resistance
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConstant
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_function
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_all_REL
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recieved_command_analyze
</UL>

<P><STRONG><a name="[69]"></a>command_do_events</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, serial_com.o(i.command_do_events))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = command_do_events &rArr; recieved_command_analyze &rArr; command_analyze &rArr; set_phase_num &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recieved_command_analyze
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_com.o(i.add_command_to_queue)
</UL>
<P><STRONG><a name="[1db]"></a>command_return</STRONG> (Thumb, 270 bytes, Stack size 288 bytes, serial_com.o(i.command_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = command_return &rArr; serial_send_handler &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_handler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recieved_command_analyze
</UL>

<P><STRONG><a name="[215]"></a>communication_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, serial_com.o(i.communication_init))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_com_init
</UL>

<P><STRONG><a name="[218]"></a>increaseWritePtr</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, serial_com.o(i.increaseWritePtr))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_handler
</UL>

<P><STRONG><a name="[209]"></a>recieve_ack_func</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, serial_com.o(i.recieve_ack_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = recieve_ack_func
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recieved_command_analyze
</UL>

<P><STRONG><a name="[208]"></a>recieve_nack_func</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, serial_com.o(i.recieve_nack_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = recieve_nack_func
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recieved_command_analyze
</UL>

<P><STRONG><a name="[1da]"></a>recieved_command_analyze</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, serial_com.o(i.recieved_command_analyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = recieved_command_analyze &rArr; command_analyze &rArr; set_phase_num &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recieve_nack_func
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recieve_ack_func
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_return
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_analyze
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_do_events
</UL>

<P><STRONG><a name="[1bf]"></a>resetSendTimer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_com.o(i.resetSendTimer))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_command_to_queue
</UL>

<P><STRONG><a name="[170]"></a>serial_send_handler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, serial_com.o(i.serial_send_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = serial_send_handler &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increaseWritePtr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConstructedProtocolMessage
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_command_handle
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_return
</UL>

<P><STRONG><a name="[15f]"></a>strtok_single</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, serial_com.o(i.strtok_single))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strtok_single &rArr; strpbrk
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMessage
</UL>

<P><STRONG><a name="[9c]"></a>transmit_command_handle</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, serial_com.o(i.transmit_command_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = transmit_command_handle &rArr; SendComMessage &rArr; ConstructProtocolString &rArr; CalculateCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> serial_com.o(i.transmit_command_handle)
<LI> serial_com.o(i.transmit_func)
</UL>
<P><STRONG><a name="[172]"></a>transmit_func</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, serial_com.o(i.transmit_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = transmit_func &rArr; restart_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_timer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConstructedProtocolMessage
</UL>

<P><STRONG><a name="[178]"></a>transmittEmptyStr</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, serial_com.o(i.transmittEmptyStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = transmittEmptyStr &rArr; SerialSend &rArr; CDC_Transmit_FS &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; PCD_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialSend
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SynchronusProcess
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinchronusTransmittFunc
</UL>

<P><STRONG><a name="[1b9]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b4]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[1bc]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1bb]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[67]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[68]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[ae]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[bb]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
